{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { api } from '../config/apiMetadata';\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./sesion-storage-manager\";\nexport class AplicationService {\n  constructor(http, ssm) {\n    this.http = http;\n    this.ssm = ssm;\n  }\n  getAplication(userId, page, pagesize) {\n    let httpHeaders = new HttpHeaders({\n      'Content-Type': 'application/json; charset=utf-8',\n      Authorization: 'Bearer ' + this.ssm.getUserInfo().token\n    });\n    return this.http.get(api.getAplicationsByIdUser, {\n      params: {\n        idUser: userId,\n        page: page,\n        pageSize: pagesize\n      },\n      headers: httpHeaders\n    }).pipe(catchError(this.handleError));\n  }\n  addAplicatio(aplication) {\n    let httpHeaders = new HttpHeaders({\n      'Content-Type': 'application/json; charset=utf-8',\n      Authorization: 'Bearer ' + this.ssm.getUserInfo().token\n    });\n    return this.http.post(api.newAplication, aplication, {\n      headers: httpHeaders\n    }).pipe(catchError((error, caught) => {\n      this.errorMessage = error.message;\n      console.error('There was an error!', error);\n      // after handling error, return a new observable \n      // that doesn't emit any values and completes\n      return of();\n    }));\n  }\n  handleError(error) {\n    if (error.status == '401') {\n      this.refresToken();\n    }\n    if (error.error instanceof ErrorEvent) {\n      console.log(error.error);\n    } else {\n      console.log(error.status);\n    }\n    return throwError('da');\n  }\n  refresToken() {\n    this.http.post(api.refreshToken, {}).subscribe(response => {\n      console.log(response);\n    });\n  }\n}\nAplicationService.ɵfac = function AplicationService_Factory(t) {\n  return new (t || AplicationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SessionStorageManagerService));\n};\nAplicationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AplicationService,\n  factory: AplicationService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,GAAG,QAAQ,uBAAuB;AAG3C,SAASC,UAAU,EAAkCC,UAAU,QAAQ,MAAM;;;;AAQ7E,OAAM,MAAOC,iBAAiB;EAC5BC,YACUC,IAAgB,EAChBC,GAAiC;IADjC,SAAI,GAAJD,IAAI;IACJ,QAAG,GAAHC,GAAG;EACV;EAEHC,aAAa,CACXC,MAAc,EACdC,IAAY,EACZC,QAAgB;IAEhB,IAAIC,WAAW,GAAG,IAAIZ,WAAW,CAAC;MAChC,cAAc,EAAE,iCAAiC;MACjDa,aAAa,EAAE,SAAS,GAAG,IAAI,CAACN,GAAG,CAACO,WAAW,EAAE,CAACC;KACnD,CAAC;IACF,OAAO,IAAI,CAACT,IAAI,CAEbU,GAAG,CAA+Bf,GAAG,CAACgB,sBAAsB,EAAE;MAC7DC,MAAM,EAAE;QACNC,MAAM,EAAEV,MAAM;QACdC,IAAI,EAAEA,IAAI;QACVU,QAAQ,EAAET;OACX;MACDU,OAAO,EAAET;KACV,CAAC,CACDU,IAAI,CAACpB,UAAU,CAAC,IAAI,CAACqB,WAAW,CAAC,CAAC;EACvC;EAEAC,YAAY,CACVC,UAA6B;IAE7B,IAAIb,WAAW,GAAG,IAAIZ,WAAW,CAAC;MAChC,cAAc,EAAE,iCAAiC;MACjDa,aAAa,EAAE,SAAS,GAAG,IAAI,CAACN,GAAG,CAACO,WAAW,EAAE,CAACC;KACnD,CAAC;IAEF,OAAO,IAAI,CAACT,IAAI,CACboB,IAAI,CAA+BzB,GAAG,CAAC0B,aAAa,EAAEF,UAAU,EAAE;MACjEJ,OAAO,EAAET;KACV,CAAC,CACDU,IAAI,CAACpB,UAAU,CAAC,CAAC0B,KAAU,EAAEC,MAAuB,KAAqB;MACxE,IAAI,CAACC,YAAY,GAAGF,KAAK,CAACG,OAAO;MACjCC,OAAO,CAACJ,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAE3C;MACA;MACA,OAAOK,EAAE,EAAE;IACf,CAAC,CAAC,CAAC;EACL;EAEAV,WAAW,CAACK,KAAU;IACpB,IAAIA,KAAK,CAACM,MAAM,IAAI,KAAK,EAAE;MAC1B,IAAI,CAACC,WAAW,EAAE;;IAEnB,IAAIP,KAAK,CAACA,KAAK,YAAYQ,UAAU,EAAE;MACrCJ,OAAO,CAACK,GAAG,CAACT,KAAK,CAACA,KAAK,CAAC;KACzB,MAAM;MACLI,OAAO,CAACK,GAAG,CAACT,KAAK,CAACM,MAAM,CAAC;;IAE3B,OAAO/B,UAAU,CAAC,IAAI,CAAC;EACzB;EAEAgC,WAAW;IACT,IAAI,CAAC7B,IAAI,CACNoB,IAAI,CAA0BzB,GAAG,CAACqC,YAAY,EAAE,EAAE,CAAC,CACnDC,SAAS,CAAEC,QAAiC,IAAI;MAC/CR,OAAO,CAACK,GAAG,CAACG,QAAQ,CAAC;IACvB,CAAC,CAAC;EACN;;AApEWpC,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAqC,SAAjBrC,iBAAiB;AAAA","names":["HttpHeaders","api","catchError","throwError","AplicationService","constructor","http","ssm","getAplication","userId","page","pagesize","httpHeaders","Authorization","getUserInfo","token","get","getAplicationsByIdUser","params","idUser","pageSize","headers","pipe","handleError","addAplicatio","aplication","post","newAplication","error","caught","errorMessage","message","console","of","status","refresToken","ErrorEvent","log","refreshToken","subscribe","response","factory"],"sourceRoot":"","sources":["C:\\Users\\Aruncutean\\Desktop\\Project LowCodeApp\\create-app\\src\\app\\service\\aplication.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { api } from '../config/apiMetadata';\r\n\r\nimport { IServerResponse } from '../model/IServerResponse';\r\nimport { catchError, map, Observable, Observer, tap, throwError } from 'rxjs';\r\nimport { IUserInfo } from '../model/IUserInfo';\r\nimport { IAplication } from '../model/IAplication';\r\nimport { IPagination } from '../model/IPagination';\r\nimport { IAplicationCreate } from '../model/IAplicationCreate';\r\nimport { SessionStorageManagerService } from './sesion-storage-manager';\r\n\r\n@Injectable()\r\nexport class AplicationService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private ssm: SessionStorageManagerService\r\n  ) {}\r\n\r\n  getAplication(\r\n    userId: string,\r\n    page: number,\r\n    pagesize: number\r\n  ): Observable<IServerResponse<IPagination>> {\r\n    let httpHeaders = new HttpHeaders({\r\n      'Content-Type': 'application/json; charset=utf-8',\r\n      Authorization: 'Bearer ' + this.ssm.getUserInfo().token\r\n    });\r\n    return this.http\r\n\r\n      .get<IServerResponse<IPagination>>(api.getAplicationsByIdUser, {\r\n        params: {\r\n          idUser: userId,\r\n          page: page,\r\n          pageSize: pagesize\r\n        },\r\n        headers: httpHeaders\r\n      })\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  addAplicatio(\r\n    aplication: IAplicationCreate\r\n  ): Observable<IServerResponse<IAplication>> {\r\n    let httpHeaders = new HttpHeaders({\r\n      'Content-Type': 'application/json; charset=utf-8',\r\n      Authorization: 'Bearer ' + this.ssm.getUserInfo().token\r\n    });\r\n\r\n    return this.http\r\n      .post<IServerResponse<IAplication>>(api.newAplication, aplication, {\r\n        headers: httpHeaders\r\n      })\r\n      .pipe(catchError((error: any, caught: Observable<any>): Observable<any> => {\r\n        this.errorMessage = error.message;\r\n        console.error('There was an error!', error);\r\n\r\n        // after handling error, return a new observable \r\n        // that doesn't emit any values and completes\r\n        return of();\r\n    }));\r\n  }\r\n\r\n  handleError(error: any) {\r\n    if (error.status == '401') {\r\n     this.refresToken();\r\n    }\r\n    if (error.error instanceof ErrorEvent) {\r\n      console.log(error.error);\r\n    } else {\r\n      console.log(error.status);\r\n    }\r\n    return throwError('da');\r\n  }\r\n\r\n  refresToken() {\r\n    this.http\r\n      .post<IServerResponse<string>>(api.refreshToken, {})\r\n      .subscribe((response: IServerResponse<string>) => {\r\n        console.log(response);\r\n      });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}