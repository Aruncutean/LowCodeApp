{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { api } from '../config/apiMetadata';\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./sesion-storage-manager\";\nexport class AplicationService {\n  constructor(http, ssm) {\n    this.http = http;\n    this.ssm = ssm;\n  }\n  getAplication(userId, page, pagesize) {\n    return this.http.get(api.getAplicationsByIdUser, {\n      params: {\n        idUser: userId,\n        page: page,\n        pageSize: pagesize\n      }\n    }).pipe(catchError(this.handleError));\n  }\n  addAplicatio(aplication) {\n    let httpHeaders = new HttpHeaders({\n      'Content-Type': 'application/json; charset=utf-8',\n      Authorization: 'Bearer ' + userData.token\n    });\n    httpHeaders = httpHeaders.set('Content-Type', 'application/json; charset=utf-8');\n    return this.http.post(api.newAplication, aplication, {\n      headers: httpHeaders\n    }).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    if (error.status == '401') {\n      this.refresToken();\n    }\n    if (error.error instanceof ErrorEvent) {\n      console.log(error.error);\n    } else {\n      console.log(error.status);\n    }\n    return throwError('da');\n  }\n  refresToken() {\n    this.http.post(api.refreshToken, {}).subscribe(response => {\n      console.log(response);\n    });\n  }\n}\nAplicationService.ɵfac = function AplicationService_Factory(t) {\n  return new (t || AplicationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SessionStorageManagerService));\n};\nAplicationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AplicationService,\n  factory: AplicationService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,GAAG,QAAQ,uBAAuB;AAG3C,SAASC,UAAU,EAAkCC,UAAU,QAAQ,MAAM;;;;AAQ7E,OAAM,MAAOC,iBAAiB;EAC5BC,YACUC,IAAgB,EAChBC,GAAiC;IADjC,SAAI,GAAJD,IAAI;IACJ,QAAG,GAAHC,GAAG;EACV;EAEHC,aAAa,CACXC,MAAc,EACdC,IAAY,EACZC,QAAgB;IAEhB,OAAO,IAAI,CAACL,IAAI,CACbM,GAAG,CAA+BX,GAAG,CAACY,sBAAsB,EAAE;MAC7DC,MAAM,EAAE;QACNC,MAAM,EAAEN,MAAM;QACdC,IAAI,EAAEA,IAAI;QACVM,QAAQ,EAAEL;;KAEb,CAAC,CACDM,IAAI,CAACf,UAAU,CAAC,IAAI,CAACgB,WAAW,CAAC,CAAC;EACvC;EAEAC,YAAY,CACVC,UAA6B;IAE7B,IAAIC,WAAW,GAAG,IAAIrB,WAAW,CAAC;MAChC,cAAc,EAAE,iCAAiC;MACjDsB,aAAa,EAAE,SAAS,GAAGC,QAAQ,CAACC;KACrC,CAAC;IACFH,WAAW,GAAGA,WAAW,CAACI,GAAG,CAC3B,cAAc,EACd,iCAAiC,CAClC;IAED,OAAO,IAAI,CAACnB,IAAI,CACboB,IAAI,CAA+BzB,GAAG,CAAC0B,aAAa,EAAEP,UAAU,EAAE;MACjEQ,OAAO,EAAEP;KACV,CAAC,CACDJ,IAAI,CAACf,UAAU,CAAC,IAAI,CAACgB,WAAW,CAAC,CAAC;EACvC;EAEAA,WAAW,CAACW,KAAU;IACpB,IAAIA,KAAK,CAACC,MAAM,IAAI,KAAK,EAAE;MACzB,IAAI,CAACC,WAAW,EAAE;;IAEpB,IAAIF,KAAK,CAACA,KAAK,YAAYG,UAAU,EAAE;MACrCC,OAAO,CAACC,GAAG,CAACL,KAAK,CAACA,KAAK,CAAC;KACzB,MAAM;MACLI,OAAO,CAACC,GAAG,CAACL,KAAK,CAACC,MAAM,CAAC;;IAE3B,OAAO3B,UAAU,CAAC,IAAI,CAAC;EACzB;EAEA4B,WAAW;IACT,IAAI,CAACzB,IAAI,CACNoB,IAAI,CAA0BzB,GAAG,CAACkC,YAAY,EAAE,EAAE,CAAC,CACnDC,SAAS,CAAEC,QAAiC,IAAI;MAC/CJ,OAAO,CAACC,GAAG,CAACG,QAAQ,CAAC;IACvB,CAAC,CAAC;EACN;;AA3DWjC,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAkC,SAAjBlC,iBAAiB;AAAA","names":["HttpHeaders","api","catchError","throwError","AplicationService","constructor","http","ssm","getAplication","userId","page","pagesize","get","getAplicationsByIdUser","params","idUser","pageSize","pipe","handleError","addAplicatio","aplication","httpHeaders","Authorization","userData","token","set","post","newAplication","headers","error","status","refresToken","ErrorEvent","console","log","refreshToken","subscribe","response","factory"],"sourceRoot":"","sources":["C:\\Users\\Aruncutean\\Desktop\\Project LowCodeApp\\create-app\\src\\app\\service\\aplication.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { api } from '../config/apiMetadata';\r\n\r\nimport { IServerResponse } from '../model/IServerResponse';\r\nimport { catchError, map, Observable, Observer, tap, throwError } from 'rxjs';\r\nimport { IUserInfo } from '../model/IUserInfo';\r\nimport { IAplication } from '../model/IAplication';\r\nimport { IPagination } from '../model/IPagination';\r\nimport { IAplicationCreate } from '../model/IAplicationCreate';\r\nimport { SessionStorageManagerService } from './sesion-storage-manager';\r\n\r\n@Injectable()\r\nexport class AplicationService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private ssm: SessionStorageManagerService\r\n  ) {}\r\n\r\n  getAplication(\r\n    userId: string,\r\n    page: number,\r\n    pagesize: number\r\n  ): Observable<IServerResponse<IPagination>> {\r\n    return this.http\r\n      .get<IServerResponse<IPagination>>(api.getAplicationsByIdUser, {\r\n        params: {\r\n          idUser: userId,\r\n          page: page,\r\n          pageSize: pagesize\r\n        }\r\n      })\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  addAplicatio(\r\n    aplication: IAplicationCreate\r\n  ): Observable<IServerResponse<IAplication>> {\r\n    let httpHeaders = new HttpHeaders({\r\n      'Content-Type': 'application/json; charset=utf-8',\r\n      Authorization: 'Bearer ' + userData.token\r\n    });\r\n    httpHeaders = httpHeaders.set(\r\n      'Content-Type',\r\n      'application/json; charset=utf-8'\r\n    );\r\n\r\n    return this.http\r\n      .post<IServerResponse<IAplication>>(api.newAplication, aplication, {\r\n        headers: httpHeaders\r\n      })\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  handleError(error: any) {\r\n    if (error.status == '401') {\r\n      this.refresToken();\r\n    }\r\n    if (error.error instanceof ErrorEvent) {\r\n      console.log(error.error);\r\n    } else {\r\n      console.log(error.status);\r\n    }\r\n    return throwError('da');\r\n  }\r\n\r\n  refresToken() {\r\n    this.http\r\n      .post<IServerResponse<string>>(api.refreshToken, {})\r\n      .subscribe((response: IServerResponse<string>) => {\r\n        console.log(response);\r\n      });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}