{"ast":null,"code":"import { api } from '../config/apiMetadata';\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AplicationService {\n  constructor(http) {\n    this.http = http;\n  }\n  get defaultHeaders() {\n    return {};\n  }\n  getAplication(userId, page, pagesize) {\n    return this.http.get(api.getAplicationsByIdUser, {\n      params: {\n        idUser: userId,\n        page: page,\n        pageSize: pagesize\n      }\n    }).pipe(catchError(this.handleError));\n  }\n  // login(auth: IAuth): Observable<IServerResponse<IUserInfo>> {\n  //   return this.http\n  //     .post<IServerResponse<IUserInfo>>(api.login, auth)\n  //     .pipe(catchError(this.handleError));\n  // }\n  // register(auth: IAuth): Observable<IServerResponse<IRegistration>> {\n  //   return this.http\n  //     .post<IServerResponse<IRegistration>>(api.register, auth)\n  //     .pipe(catchError(this.handleError));\n  // }\n  handleError(error) {\n    if (error.error instanceof ErrorEvent) {\n      console.log(error.error);\n    } else {\n      console.log(error.status);\n    }\n    return throwError('da');\n  }\n}\nAplicationService.ɵfac = function AplicationService_Factory(t) {\n  return new (t || AplicationService)(i0.ɵɵinject(i1.HttpClient));\n};\nAplicationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AplicationService,\n  factory: AplicationService.ɵfac\n});","map":{"version":3,"mappings":"AAEA,SAASA,GAAG,QAAQ,uBAAuB;AAG3C,SAASC,UAAU,EAAkCC,UAAU,QAAQ,MAAM;;;AAK7E,OAAM,MAAOC,iBAAiB;EAC5BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAe;EAEvC,IAAYC,cAAc;IACxB,OAAO,EAAE;EACX;EAEAC,aAAa,CACXC,MAAc,EACdC,IAAY,EACZC,QAAgB;IAEhB,OAAO,IAAI,CAACL,IAAI,CACbM,GAAG,CAAiCX,GAAG,CAACY,sBAAsB,EAAE;MAC/DC,MAAM,EAAE;QACNC,MAAM,EAAEN,MAAM;QACdC,IAAI,EAAEA,IAAI;QACVM,QAAQ,EAAEL;;KAEb,CAAC,CACDM,IAAI,CAACf,UAAU,CAAC,IAAI,CAACgB,WAAW,CAAC,CAAC;EACvC;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEQA,WAAW,CAACC,KAAU;IAC5B,IAAIA,KAAK,CAACA,KAAK,YAAYC,UAAU,EAAE;MACrCC,OAAO,CAACC,GAAG,CAACH,KAAK,CAACA,KAAK,CAAC;KACzB,MAAM;MACLE,OAAO,CAACC,GAAG,CAACH,KAAK,CAACI,MAAM,CAAC;;IAE3B,OAAOpB,UAAU,CAAC,IAAI,CAAC;EACzB;;AA1CWC,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAoB,SAAjBpB,iBAAiB;AAAA","names":["api","catchError","throwError","AplicationService","constructor","http","defaultHeaders","getAplication","userId","page","pagesize","get","getAplicationsByIdUser","params","idUser","pageSize","pipe","handleError","error","ErrorEvent","console","log","status","factory"],"sourceRoot":"","sources":["C:\\Users\\Aruncutean\\Desktop\\Project LowCodeApp\\create-app\\src\\app\\service\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { api } from '../config/apiMetadata';\r\n\r\nimport { IServerResponse } from '../model/IServerResponse';\r\nimport { catchError, map, Observable, Observer, tap, throwError } from 'rxjs';\r\nimport { IUserInfo } from '../model/IUserInfo';\r\nimport { IAplication } from '../model/IAplication';\r\n\r\n@Injectable()\r\nexport class AplicationService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  private get defaultHeaders() {\r\n    return {};\r\n  }\r\n\r\n  getAplication(\r\n    userId: string,\r\n    page: number,\r\n    pagesize: number\r\n  ): Observable<IServerResponse<IAplication[]>> {\r\n    return this.http\r\n      .get<IServerResponse<IAplication[]>>(api.getAplicationsByIdUser, {\r\n        params: {\r\n          idUser: userId,\r\n          page: page,\r\n          pageSize: pagesize\r\n        }\r\n      })\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  // login(auth: IAuth): Observable<IServerResponse<IUserInfo>> {\r\n  //   return this.http\r\n  //     .post<IServerResponse<IUserInfo>>(api.login, auth)\r\n  //     .pipe(catchError(this.handleError));\r\n  // }\r\n\r\n  // register(auth: IAuth): Observable<IServerResponse<IRegistration>> {\r\n  //   return this.http\r\n  //     .post<IServerResponse<IRegistration>>(api.register, auth)\r\n  //     .pipe(catchError(this.handleError));\r\n  // }\r\n\r\n  private handleError(error: any) {\r\n    if (error.error instanceof ErrorEvent) {\r\n      console.log(error.error);\r\n    } else {\r\n      console.log(error.status);\r\n    }\r\n    return throwError('da');\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}