{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { api } from '../config/apiMetadata';\nimport { catchError, of, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./sesion-storage-manager\";\nexport class AplicationService {\n  constructor(http, ssm) {\n    this.http = http;\n    this.ssm = ssm;\n  }\n  getAplication(userId, page, pagesize) {\n    let httpHeaders = new HttpHeaders({\n      'Content-Type': 'application/json; charset=utf-8',\n      Authorization: 'Bearer ' + this.ssm.getUserInfo().token\n    });\n    return this.http.get(api.getAplicationsByIdUser, {\n      params: {\n        idUser: userId,\n        page: page,\n        pageSize: pagesize\n      },\n      headers: httpHeaders\n    }).pipe(catchError(error => {\n      if (error.status == '401') {\n        this.refresToken();\n      }\n      return of();\n    }));\n  }\n  addAplicatio(aplication) {\n    let httpHeaders = new HttpHeaders({\n      'Content-Type': 'application/json; charset=utf-8',\n      Authorization: 'Bearer ' + this.ssm.getUserInfo().token\n    });\n    return this.http.post(api.newAplication, aplication, {\n      headers: httpHeaders\n    }).pipe(catchError((error, caught) => {\n      if (error.status == '401') {\n        this.refresToken();\n      }\n      return of();\n    }));\n  }\n  handleError(error) {\n    if (error.error instanceof ErrorEvent) {\n      console.log(error.error);\n    } else {\n      console.log(error.status);\n    }\n    return throwError('da');\n  }\n  refresToken() {\n    this.http.post(api.refreshToken, {\n      id: this.ssm.getUserInfo().id,\n      token: this.ssm.getUserInfo().token\n    }).pipe(catchError(error => {\n      if (error.status == '401') {\n        this.refresToken();\n      }\n      return of();\n    })).subscribe(response => {\n      return this.ssm.setUserInfo({\n        id: this.ssm.getUserInfo().id,\n        email: this.ssm.getUserInfo().email,\n        name: this.ssm.getUserInfo().name,\n        token: response.returnValue,\n        refreshTokens: this.ssm.getUserInfo().refreshTokens\n      });\n    });\n  }\n}\nAplicationService.ɵfac = function AplicationService_Factory(t) {\n  return new (t || AplicationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SessionStorageManagerService));\n};\nAplicationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AplicationService,\n  factory: AplicationService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","api","catchError","of","throwError","AplicationService","constructor","http","ssm","getAplication","userId","page","pagesize","httpHeaders","Authorization","getUserInfo","token","get","getAplicationsByIdUser","params","idUser","pageSize","headers","pipe","error","status","refresToken","addAplicatio","aplication","post","newAplication","caught","handleError","ErrorEvent","console","log","refreshToken","id","subscribe","response","setUserInfo","email","name","returnValue","refreshTokens","factory"],"sourceRoot":"","sources":["C:\\Users\\Aruncutean\\Desktop\\Project LowCodeApp\\create-app\\src\\app\\service\\aplication.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { api } from '../config/apiMetadata';\r\n\r\nimport { IServerResponse } from '../model/IServerResponse';\r\nimport {\r\n  catchError,\r\n  map,\r\n  Observable,\r\n  Observer,\r\n  of,\r\n  tap,\r\n  throwError\r\n} from 'rxjs';\r\nimport { IUserInfo } from '../model/IUserInfo';\r\nimport { IAplication } from '../model/IAplication';\r\nimport { IPagination } from '../model/IPagination';\r\nimport { IAplicationCreate } from '../model/IAplicationCreate';\r\nimport { SessionStorageManagerService } from './sesion-storage-manager';\r\n\r\n@Injectable()\r\nexport class AplicationService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private ssm: SessionStorageManagerService\r\n  ) {}\r\n\r\n  getAplication(\r\n    userId: string,\r\n    page: number,\r\n    pagesize: number\r\n  ): Observable<IServerResponse<IPagination>> {\r\n    let httpHeaders = new HttpHeaders({\r\n      'Content-Type': 'application/json; charset=utf-8',\r\n      Authorization: 'Bearer ' + this.ssm.getUserInfo().token\r\n    });\r\n    return this.http\r\n\r\n      .get<IServerResponse<IPagination>>(api.getAplicationsByIdUser, {\r\n        params: {\r\n          idUser: userId,\r\n          page: page,\r\n          pageSize: pagesize\r\n        },\r\n        headers: httpHeaders\r\n      })\r\n      .pipe(\r\n        catchError(\r\n          (error: any): Observable<any> => {\r\n            if (error.status == '401') {\r\n              this.refresToken();\r\n            }\r\n            return of();\r\n          }\r\n        )\r\n      );\r\n  }\r\n\r\n  addAplicatio(\r\n    aplication: IAplicationCreate\r\n  ): Observable<IServerResponse<IAplication>> {\r\n    let httpHeaders = new HttpHeaders({\r\n      'Content-Type': 'application/json; charset=utf-8',\r\n      Authorization: 'Bearer ' + this.ssm.getUserInfo().token\r\n    });\r\n\r\n    return this.http\r\n      .post<IServerResponse<IAplication>>(api.newAplication, aplication, {\r\n        headers: httpHeaders\r\n      })\r\n      .pipe(\r\n        catchError(\r\n          (error: any, caught: Observable<any>): Observable<any> => {\r\n            if (error.status == '401') {\r\n              this.refresToken();\r\n            }\r\n\r\n            return of();\r\n          }\r\n        )\r\n      );\r\n  }\r\n\r\n  handleError(error: any) {\r\n    if (error.error instanceof ErrorEvent) {\r\n      console.log(error.error);\r\n    } else {\r\n      console.log(error.status);\r\n    }\r\n    return throwError('da');\r\n  }\r\n\r\n  refresToken() {\r\n    this.http\r\n      .post<IServerResponse<string>>(api.refreshToken, {\r\n        id: this.ssm.getUserInfo().id,\r\n        token: this.ssm.getUserInfo().token\r\n      })\r\n      .pipe(\r\n        catchError(\r\n          (error: any): Observable<any> => {\r\n            if (error.status == '401') {\r\n              this.refresToken();\r\n            }\r\n            return of();\r\n          }\r\n        )\r\n      )\r\n      .subscribe((response: IServerResponse<string>) => {\r\n        return this.ssm.setUserInfo({\r\n          id: this.ssm.getUserInfo().id,\r\n          email: this.ssm.getUserInfo().email,\r\n          name: this.ssm.getUserInfo().name,\r\n          token: response.returnValue,\r\n          refreshTokens: this.ssm.getUserInfo().refreshTokens\r\n        });\r\n      });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}